# SPDX-FileCopyrightText: 2020 Wolfgang Traylor <wolfgang.traylor@senckenberg.de>
#
# SPDX-License-Identifier: LGPL-3.0-or-later

stages:
  - build
  - test
  - postprocess

variables:
  # Install packages without user interaction.
  DEBIAN_FRONTEND: "noninteractive"

# The documentation and the source code are compiled separately so that the
# pipeline can continue with the unit tests even if doxygen fails.

compile:
  image: gcc:latest
  stage: build
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq cmake
  script:
    - mkdir --parents build
    - cp examples/demo_simulation.toml build/
    - cd build
    - cmake
      -DBUILD_TESTING=ON
      -DBUILD_DEMO_SIMULATOR=ON
      -DBUILD_DOC=OFF ..
    - make --jobs=6
      megafauna_demo_simulator
      megafauna_insfile_linter
      megafauna_unit_tests
  artifacts:
    paths:
      - build/demo_results.Rmd
      - build/demo_simulation.toml
      - build/megafauna.toml
      - build/megafauna_demo_simulator
      - build/megafauna_insfile_linter
      - build/megafauna_unit_tests
    expire_in: 20 minutes

doxygen:
  image: ubuntu:latest
  stage: build
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq
      cmake
      default-jre
      doxygen
      g++
      graphviz
      texlive-base
  script:
    - mkdir --parents build
    - cd build
    - cmake
      -DSTOP_DOXYGEN_ON_WARNING=ON
      -DBUILD_TESTING=OFF
      -DBUILD_DEMO_SIMULATOR=OFF
      -DBUILD_DOC=ON ..
    - make --jobs=6 megafauna_docs
  artifacts:
    paths:
      - build/docs/html/

unit_tests:
  image: ubuntu:latest
  stage: test
  needs: ["compile"]
  script:
    - cd build
    - ./megafauna_unit_tests

# Check that the linter works and that the example instruction files are
# correct.
linter:
  image: ubuntu:latest
  stage: test
  needs: ["compile"]
  script:
    # Good Files:
    - ./build/megafauna_insfile_linter examples/megafauna.toml
    - for f in tests/good_insfiles/*.toml; do ./build/megafauna_insfile_linter $f; done
    # Bad Files:
    # These checks could be done with the catch framework, too
    # (CHECK_THROWS_AS). That would be more flexible than checking for a
    # specific error message in STDERR.
    # Note that commands that expected to fail need to be executed in a
    # subshell like this: `(command || true)`
    - (./build/megafauna_insfile_linter tests/bad_insfiles/catabolism_gt_anabolism.toml 2>&1 || true) | tr '\n' ' ' | grep -iq 'body_fat\.catabolism_efficiency.*must be less than the anabolism'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/wrong_type_01.toml 2>&1 || true) | grep -iq 'body_mass\.female.*wrong type'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/wrong_type_02.toml 2>&1 || true) | grep -iq 'body_mass\.female.*wrong type'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/wrong_type_03.toml 2>&1 || true) | grep -iq 'output\.text_tables\.tables.*wrong type.*expected array of string'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/wrong_type_04.toml 2>&1 || true) | grep -iq 'expenditure\.components.*wrong type'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/wrong_type_05.toml 2>&1 || true) | grep -iq 'mortality\.factors.*wrong type'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/wrong_type_06.toml 2>&1 || true) | grep -iq 'simulation\.establishment_interval.*wrong type'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/wrong_type_07.toml 2>&1 || true) | grep -iq 'output\.text_tables\.precision.*wrong type'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/wrong_type_08.toml 2>&1 || true) | grep -iq 'body_mass\.female.*wrong type'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/two_groups_with_same_name.toml 2>&1 || true) | grep -iq 'group.*is defined twice'
    - (./build/megafauna_insfile_linter tests/bad_insfiles/two_hfts_with_same_name.toml 2>&1 || true) | grep -iq 'HFT.*is defined twice'

memcheck:
  image: ubuntu:latest
  stage: test
  needs: ["compile"]
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq valgrind
  script:
    - cd build
    # Only run two years:
    - sed -e 's/^\s*years\s*=.*/years = 2/' --in-place
      demo_simulation.toml
    # The following command needs to be quoted as a whole so that the YAML
    # parser does not interpret the "|" special character.
    - "valgrind
      --leak-check=full
      --show-leak-kinds=all
      --track-origins=yes
      --verbose
      ./megafauna_demo_simulator
      megafauna.toml
      demo_simulation.toml
      | tee memcheck.log"
    # If the error summary has not zero errors, the grep command will fail.
    - "! grep --silent 'ERROR SUMMARY: 0 errors' memcheck.log"
  artifacts:
    paths:
      - build/memcheck.log

demo_simulation:
  image: ubuntu:latest
  stage: test
  needs: ["compile"]
  script:
    - cd build
    - ./megafauna_demo_simulator
      "megafauna.toml"
      "demo_simulation.toml"
  artifacts:
    paths:
      - build/demo_results.Rmd
      - build/available_forage.tsv
      - build/digestibility.tsv
      - build/eaten_forage_per_ind.tsv
      - build/eaten_nitrogen_per_ind.tsv
      - build/mass_density_per_hft.tsv
    expire_in: 20 minutes

plot_demo_results:
  image: r-base:latest
  stage: postprocess
  needs: ["demo_simulation"]
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq pandoc
    - Rscript -e 'install.packages(c("ggplot2", "rmarkdown", "tidyr"))'
  script:
    - cd build
    - Rscript -e "rmarkdown::render('demo_results.Rmd')"
    - test -f "demo_results.html"
  artifacts:
    paths:
      - build/demo_results.html
